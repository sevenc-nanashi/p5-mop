import { defineConfig, Plugin } from "vite";
import { relative } from "node:path";
import { readFile, readdir, writeFile } from "node:fs/promises";

const dedent = (base: string) => {
  const leftPadding = base.split("\n").reduce((acc, line) => {
    const spaceMatch = line.match(/^\s+/);
    if (!spaceMatch) {
      return acc;
    }

    const leadingWhitespace = spaceMatch[0].length;
    return Math.min(acc, leadingWhitespace);
  }, Infinity);

  return base
    .split("\n")
    .map((line) => line.slice(leftPadding))
    .join("\n");
};

const projectRoot = import.meta.dirname;

const getModules = async () => {
  return await readdir(`${projectRoot}/src/modules`).then((files) =>
    files.filter((file) => file.endsWith(".module.ts")),
  );
};

let prevModules: Record<string, string> = {};

const createMopPlugin = (): Plugin => {
  return {
    name: "mop-plugin",
    enforce: "pre",
    async load(id) {
      const relativePath = relative(projectRoot, id);
      if (relativePath === "src/main.ts") {
        const modules = await getModules();
        const content = await readFile(id, "utf-8");
        const placeholders = [...content.matchAll(/\/\* mop-modules \*\//g)];
        if (placeholders.length !== 1) {
          this.error(
            "Expected exactly one /* mop-modules */ placeholder in src/main.ts.",
          );
        }
        return content.replace(
          "/* mop-modules */",
          modules
            .map((module) => JSON.stringify(`./modules/${module}`))
            .join(", "),
        );
      }
    },

    async handleHotUpdate() {
      const moduleNames: Record<string, string> = {};
      const modulePaths = await getModules();
      for (const modulePath of modulePaths) {
        const moduleContent = await readFile(
          `${projectRoot}/src/modules/${modulePath}`,
          "utf-8",
        );
        const identifier = moduleContent.match(
          /export default class (\w+)/,
        )?.[1];
        if (!identifier) {
          throw new Error(
            `Failed to find the module name in src/modules/${modulePath}.`,
          );
        }
        moduleNames[modulePath] = identifier;
      }

      if (JSON.stringify(moduleNames) === JSON.stringify(prevModules)) {
        return;
      }

      await writeFile(
        `${projectRoot}/src/modules/modules.generated.ts`,
        [
          "/* eslint-disable */",
          "// This file is generated by the mop-plugin Vite plugin. Do not edit it manually.",
          Object.entries(moduleNames)
            .map(
              ([path, name]) =>
                `import ${name} from ${JSON.stringify(`./${path}`)};`,
            )
            .join("\n"),
          "",
          "export type Modules = {",
          Object.values(moduleNames)
            .map((name) => `  ${name}: ${name};`)
            .join("\n"),
          "};",
        ].join("\n") + "\n",
      );
    },
  };
};

export default defineConfig({
  plugins: [createMopPlugin()],
});
